// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const checkUserExistenceByName = `-- name: CheckUserExistenceByName :one
SELECT EXISTS (SELECT 1 FROM "user" WHERE name = $1)
`

func (q *Queries) CheckUserExistenceByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserExistenceByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user"
    (name, updated_at)
VALUES
    ($1, $2) RETURNING id, name, created_at, updated_at
`

type CreateUserParams struct {
	Name      string
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, created_at, updated_at FROM "user"
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, created_at, updated_at FROM "user" WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetUserTable = `-- name: ResetUserTable :exec
TRUNCATE "user" CASCADE
`

func (q *Queries) ResetUserTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUserTable)
	return err
}
