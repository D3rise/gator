// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: post.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getPostsByUserFeedFollows = `-- name: GetPostsByUserFeedFollows :many
SELECT post.id, post.created_at, post.updated_at, post.title, post.url, post.description, post.published_at, post.feed_id FROM "post"
    JOIN public.feed f on f.id = post.feed_id
    JOIN public.feed_follow ff on f.id = ff.feed_id
    JOIN public."user" u on u.id = ff.user_id
    WHERE u.id = $1
`

func (q *Queries) GetPostsByUserFeedFollows(ctx context.Context, id uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserFeedFollows, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertPostOnUrl = `-- name: UpsertPostOnUrl :exec
INSERT INTO "post"
    (title, url, description, published_at, feed_id)
    VALUES
    ($1, $2, $3, $4, $5)
    ON CONFLICT (url) DO NOTHING
`

type UpsertPostOnUrlParams struct {
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      uuid.UUID
}

func (q *Queries) UpsertPostOnUrl(ctx context.Context, arg UpsertPostOnUrlParams) error {
	_, err := q.db.ExecContext(ctx, upsertPostOnUrl,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	return err
}
